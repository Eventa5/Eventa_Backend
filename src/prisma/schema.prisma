generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// directUrl = env("DIRECT_URL") 直接連接DB的url Supabase DB 需要

enum ActivityStatus {
  draft
  published
  ended
  canceled
}

// 新增活動時的當前步驟
enum ActivityStep {
  activityType
  categories
  basic
  content
  ticketTypes
}

enum OrderStatus {
  paid
  pending
  expired
  canceled
}

enum InvoiceType {
  b2c
  b2b
}

enum TicketStatus {
  used
  assigned
  unassigned
  canceled
  overdue
}

model User {
  id               Int            @id @default(autoincrement())
  memberId         String         @unique
  email            String         @unique
  password         String?
  resetToken       String?        @unique
  resetTokenExpiry DateTime?
  name             String?
  avatar           String?
  displayName      String?
  birthday         DateTime?
  gender           String?
  phoneNumber      String?
  countryCode      String?
  region           String?
  address          String?
  identity         String?
  userIdentity     UserIdentity[]
  organization     Organization[]
  createdAt        DateTime       @default(now())
  updateAt         DateTime       @updatedAt
  activityLike     ActivityLike[]
  orders           Order[]
  tickets          Ticket[]
  invoices         UserInvoice[]

  @@map("users") // 指定存入db的table name
}

model UserIdentity {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  provider   String
  providerId String
  email      String
  createdAt  DateTime @default(now())

  @@map("user_identities")
}

model Organization {
  id              Int        @id @default(autoincrement())
  userId          Int
  email           String     @unique
  name            String?
  avatar          String?
  cover           String?
  introduction    String?
  phoneNumber     String?
  countryCode     String?
  ext             String?
  officialSiteUrl String?
  localeId        Int?
  currencyId      Int?
  createdAt       DateTime   @default(now())
  updateAt        DateTime   @updatedAt
  deletedAt       DateTime?
  user            User       @relation(fields: [userId], references: [id])
  locale          Locale?    @relation(fields: [localeId], references: [id])
  currency        Currency?  @relation(fields: [currencyId], references: [id])
  Activity        Activity[]

  @@map("organizations")
}

model Locale {
  id           Int            @id @default(autoincrement())
  name         String
  code         String
  organization Organization[]

  @@map("locales")
}

model Currency {
  id           Int            @id @default(autoincrement())
  name         String
  code         String
  organization Organization[]

  @@map("currencies")
}

model Activity {
  id             Int            @id @default(autoincrement())
  organizationId Int
  cover          String?
  title          String?
  location       String?
  startTime      DateTime?
  endTime        DateTime?
  isOnline       Boolean
  tags           String?
  status         ActivityStatus @default(draft)
  descriptionMd  String?
  viewCount      Int            @default(0)
  summary        String?
  notes          String?
  livestreamUrl  String?
  currentStep    ActivityStep   @default(activityType)
  createdAt      DateTime       @default(now())
  updateAt       DateTime       @updatedAt
  organization   Organization   @relation(fields: [organizationId], references: [id])
  categories     Category[]
  activityLike   ActivityLike[]
  orders         Order[]
  tickets        Ticket[]
  ticketTypes    TicketType[]

  @@map("activities")
}

model Category {
  id         Int        @id @default(autoincrement())
  name       String
  image      String?
  icon       String?
  activities Activity[]

  @@map("categories")
}

model ActivityLike {
  activityId Int
  userId     Int
  createdAt  DateTime @default(now())
  activity   Activity @relation(fields: [activityId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id(name: "activityLikeId", [activityId, userId])
  @@map("activity_likes")
}

model Order {
  id                         String      @id
  user                       User        @relation(fields: [userId], references: [id])
  userId                     Int
  paidExpiredAt              DateTime    @default(dbgenerated("now() + interval '10 minutes'"))
  paidAt                     DateTime?
  status                     OrderStatus @default(pending)
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime?   @updatedAt
  activity                   Activity    @relation(fields: [activityId], references: [id])
  activityId                 Int
  invoiceAddress             String?
  invoiceTitle               String?
  invoiceTaxId               String?
  invoiceReceiverName        String?
  invoiceReceiverPhoneNumber String?
  invoiceReceiverEmail       String?
  invoiceCarrier             String?
  invoiceType                InvoiceType @default(b2c)
  tickets                    Ticket[]
  payment                    Payment?
  refunds                    Refund[]
  orderItems                 OrderItem[]

  @@map("orders")
}

model Ticket {
  id             String       @id
  ticketType     TicketType   @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId   Int
  activity       Activity     @relation(fields: [activityId], references: [id])
  activityId     Int
  order          Order        @relation(fields: [orderId], references: [id])
  orderId        String
  qrCodeToken    String
  checkInAt      DateTime?
  status         TicketStatus @default(unassigned)
  assignedUser   User?        @relation(fields: [assignedUserId], references: [id])
  assignedUserId Int?
  assignedEmail  String?
  assignedName   String?
  refundDeadline DateTime
  createdAt      DateTime     @default(now())
  updateAt       DateTime?    @updatedAt

  @@map("tickets")
}

model TicketType {
  id                Int         @id @default(autoincrement())
  activity          Activity    @relation(fields: [activityId], references: [id])
  activityId        Int
  name              String
  price             Int
  totalQuantity     Int
  remainingQuantity Int
  description       String?
  startTime         DateTime
  endTime           DateTime
  saleStartAt       DateTime?
  saleEndAt         DateTime?
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updateAt          DateTime?   @updatedAt
  tickets           Ticket[]
  refunds           Refund[]
  orderItems        OrderItem[]

  @@map("ticket_types")
}

model OrderItem {
  id           Int        @id @default(autoincrement())
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId Int
  order        Order      @relation(fields: [orderId], references: [id])
  orderId      String
  quantity     Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt

  @@map("order_items")
}

model Payment {
  id         Int       @id @default(autoincrement())
  order      Order     @relation(fields: [orderId], references: [id])
  orderId    String    @unique
  method     String?
  tradeId    String?
  rawData    Json?
  paidAmount Int
  paidAt     DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  refunds    Refund[]

  @@map("payments")
}

model Refund {
  id           Int        @id @default(autoincrement())
  order        Order      @relation(fields: [orderId], references: [id])
  orderId      String
  payment      Payment    @relation(fields: [paymentId], references: [id])
  paymentId    Int
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId Int
  amount       Int
  reason       String?
  status       String?
  requestedAt  DateTime   @default(now())
  processedAt  DateTime?
  responseData Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt

  @@map("refunds")
}

model UserInvoice {
  id                         Int         @id @default(autoincrement())
  user                       User        @relation(fields: [userId], references: [id])
  userId                     Int
  invoiceName                String
  invoiceAddress             String?
  invoiceReceiverName        String?
  invoiceReceiverPhoneNumber String?
  invoiceTaxId               String?
  invoiceTitle               String?
  invoiceCarrier             String?
  invoiceType                InvoiceType @default(b2c)
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime?   @updatedAt
  deletedAt                  DateTime?

  @@map("user_invoices")
}
